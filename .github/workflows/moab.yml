name: MOAB

on:
  # allows running workflows manually
  workflow_dispatch:

  pull_request:
    branches:
      - windows
    paths-ignore:
      - docs/**

  push:
    branches:
      - windows
    paths-ignore:
      - docs/**

jobs:
  main:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Set up Python Ubuntu and MacOS
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}

      - name: Setup Conda Environment Windows
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-activate-base: true
          activate-environment: ""
        if: ${{ matrix.os == 'windows-latest' }}

      - name: Install HDF5 and Eigen Ubuntu
        run: |
          sudo apt-get update
          sudo apt-get install -y libblas-dev liblapack-dev libeigen3-dev libhdf5-dev hdf5-tools
          # hdf5 std directory
          export HDF5_ROOT=/usr/lib/x86_64-linux-gnu/hdf5/serial
          export LD_LIBRARY_PATH="${HDF5_ROOT}:${LD_LIBRARY_PATH}"
        if: ${{ matrix.os == 'ubuntu-latest' }}

      - name: Install HDF5 and Eigen MacOS
        run: |
          brew install hdf5 eigen
          export HDF5_ROOT=/usr/local/opt/hdf5
          export LD_LIBRARY_PATH="${HDF5_ROOT}/lib:${LD_LIBRARY_PATH}"
          _sdk_root=`xcrun --sdk macosx --show-sdk-path`
          export LIBRARY_PATH="${_sdk_root}/usr/lib"
        if: ${{ matrix.os == 'macos-latest' }}

      - name: Install HDF5 and Eigen Windows
        shell: bash -l {0}
        run: |
          conda install curl eigen
          conda install -c conda-forge hdf5
          conda remove -y yaml-cpp
          echo "HOME_PATH=$GITHUB_WORKSPACE/.." >> $GITHUB_ENV
          echo "CONDA_LOC=$(conda info --base)/Library" >> $GITHUB_ENV
        if: ${{ matrix.os == 'windows-latest' }}

      - name: Install Python Packages
        shell: bash -l {0}
        run: |
          python -m pip install wheel
          python -m pip install cython numpy pytest setuptools
          echo "PYTHON_EXECUTABLE=$(which python)" >> $GITHUB_ENV

      - name: Install MOAB Ubuntu
        run: |
          cd $GITHUB_WORKSPACE
          git clone https://ahnaf-tahmid@bitbucket.org/nuclear-engineering/moab.git
          cd moab
          mkdir -p build
          cd build
          # cmake, build and install
          cmake ../ -DENABLE_HDF5=ON \
              -DHDF5_ROOT=$HDF5_ROOT \
              -DBUILD_SHARED_LIBS=ON \
              -DENABLE_PYMOAB=ON \
              -DENABLE_BLASLAPACK=OFF \
              -DENABLE_FORTRAN=OFF \
              -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE} \
              -DCMAKE_INSTALL_PREFIX=$Python_ROOT_DIR
          make
          make install
          cd $GITHUB_WORKSPACE
          rm -rf $GITHUB_WORKSPACE/moab
          echo "MOAB installed"
        if: ${{ matrix.os == 'ubuntu-latest' }}

      - name: Install MOAB MacOS
        run: |
          cd $GITHUB_WORKSPACE
          git clone https://ahnaf-tahmid@bitbucket.org/nuclear-engineering/moab.git
          cd moab
          mkdir -p build
          cd build
          # cmake, build and install
          cmake ../ \
            -DCMAKE_INSTALL_PREFIX=$Python_ROOT_DIR \
            -DENABLE_BLASLAPACK=OFF \
            -DENABLE_FORTRAN=OFF \
            -DENABLE_PYMOAB=ON \
            -DBUILD_SHARED_LIBS=ON \
            -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE} \
            -DENABLE_HDF5=ON \
          make
          make install
          cd $GITHUB_WORKSPACE
          rm -rf $GITHUB_WORKSPACE/moab
          echo "MOAB installed"
        if: ${{ matrix.os == 'macos-latest' }}

      - name: Install MOAB Windows
        shell: bash -l {0}
        run: |
          cd $GITHUB_WORKSPACE
          git clone https://ahnaf-tahmid@bitbucket.org/nuclear-engineering/moab.git
          cd moab
          mkdir -p build
          cd build
          cmake ../ \
                -G"Visual Studio 17 2022"  \
                -DCMAKE_INSTALL_PREFIX="${CONDA_LOC}/" \
                -DENABLE_BLASLAPACK=OFF \
                -DENABLE_FORTRAN=OFF \
                -DENABLE_PYMOAB=ON \
                -DPYMOAB_INSTALL_PREFIX="${CONDA_LOC}/.." \
                -DBUILD_SHARED_LIBS=ON \
                -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE} \
                -DENABLE_HDF5=ON \
                -DHDF5_ROOT="${CONDA_LOC}" \
                -DHDF5_hdf5_LIBRARY_RELEASE="${CONDA_LOC}/lib/libhdf5_hl.lib;${CONDA_LOC}/lib/libhdf5.lib;${CONDA_LOC}/lib/zlib.lib;${CONDA_LOC}/lib/libhdf5_cpp.lib" \
                -DCMAKE_BUILD_TYPE=Release 
          cmake --build . --config Release
          cmake --install . --config Release
          cd $GITHUB_WORKSPACE
          rm -rf $GITHUB_WORKSPACE/moab
          echo "MOAB installed"
        if: ${{ matrix.os == 'windows-latest' }}

      - name: Checkout PyDAGMC
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install PyDAGMC
        run: |
          python -m pip install .

      - name: Test PyDAGMC
        run: |
          python -m pip install pytest
          python -m pytest -ra tests